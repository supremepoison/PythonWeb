BOM - window 对象
1.方法:
	1.所有全局函数都是window对象的方法
	2.所有的对话框都是window对象自带的方法
	3.定时器方法
		1.周期性定时器(间歇调用)
			每隔一段时间,执行一次代码
			语法:
				setInterval(function,time);//开启周期性定时器
				参数:
					funtion: 要执行的代码
					time : 	 表示时间间隔,以毫秒为单位
						1s = 1000ms
				返回值: 定时器的id	(整数值)
				
			清除周期定时器:
				clearInterval(timeID);
				停止定时器,参数为定时器ID值
				
		2.一次性定时器(超时调用)
			等待一段时间之后,执行一次代码
			语法:
				setTimeout(function,delay);	//开启一次性定时器
				参数:
					fucntion : 需要执行的代码
					delay:     延迟执行的时长,默认毫秒为单位
				返回值:
					定时器ID
				
				关闭超时调用:
					clearTimeout(timeID);
					
		练习:
			网页创建按钮,点击时,提示用户是否要关闭网页
			confirm(''),点击确定返回True
			如果点击确定,3秒后关闭网页 window.close();
			
2.属性
	window对象中大部分属性,又都是对象类型,包含自身的属性和方法
		e.g.
			window.document;
			window.document.write();
	1.screen 对象
		包含与屏幕相关的信息
		属性:
			1.width/height: 屏幕宽高
			2.availWidth/availHeight : 屏幕实际可用的宽高
			
	2.history 对象
		保存当前窗口访问过的url
		1.属性
			length: 当前窗口访问过的url数量,至少为1
		2.方法:
			1.back(): 	 回退上一条url(浏览器后退按钮)
			2.forward(): 访问下一条url(前进按钮)
			3.go(num):	 跳转至指定的url,通过参数控制
				参数为整数值,可正可负,正值表示前进,
				负值表示后退
				
	3.location 对象
		保存地址栏信息(URL)
			1.属性:
				href: 保存当前串口的url
				如果给href赋值, 相当于跳转页面
			2.方法:
				reload([parameter]) : 重新载入页面(刷新)
				参数: 选填,可选 true/false
					true: 忽略缓存,从服务器端重新加载
					false: 默认值,从缓存中加载
					
	4.navigator 对象
		保存浏览器相关的信息(版本,内核,代理...)
		
----------------------------------------------------------------------------------

DOM - document 对象
	1.介绍:
		文档对象模型,提供一系列操作页面的属性和方法.改模型中顶层对象是document对象.
		其属性和方法由W3C国际组织进行规范和推广
	2.节点和节点树
		网页在加载过程中,会自动生成节点树(DOM树),节点树对象封装网页所有的内容(标签,文本,标签属性,注释..)
		节点树中保存所有的节点对象,表示各节点之间的层级关系
		
		1.节点分类
			1.元素节点 -> 文档中的标签
			2.文本节点 -> 标签中的文本内容
			3.属性节点 -> 标签属性
			--------------------
			4.注释节点 -> 注释节点
			5.文档节点 -> document 
			
		2.节点操作
			1.获取节点对象
			2.修改节点
			3.删除节点
			4.增加节点
	
	3.获取节点
	
		涉及到获取元素节点,必须考虑代码的解析顺序
		必须等待文档加载完毕之后,才能获取到节店对象.
		获取操作必须书写在Body末尾
		
		1.根据标签名获取节点对象,返回节点列表(类数组)
			方法:
				document.getElementsByTagName('标签名');
			返回值:
				节点列表,可以通过下标访问具体节点对象
				
		2.根据元素的id属性获取元素
			方法:
				document.getElementById('id属性值')
				返回值:	由于id具有唯一性,该方法会返回具体的节点对象
		
		3.根据元素的class属性值获取元素节点数组
			方法:
				document.getElementsByClassName(class属性值'')
			返回值:
				由于class属性值可以复用,该方法会返回所有的元素节点数组
				
		4.根据表单控件的name属性值,获取元素节点数组
			方法:
				documtn.getElementsByName('name属性值')
			返回值:
				返回节点数组
				
	4.操作元素节点的属性
	
		1.获取指定属性的值
			getAttribute('attrName');
			根据传入的属性名,获取对应的属性值
			
		2.为元素节点设置属性
			setAttribute('attrName','value');
			
		3.移除指定属性
			removerAttribute('attrName');
			
		4.标签属性就是元素节点对象的属性
			可以使用点语法访问
			获取:
				elem.id // 获取id属性值
				elem.className // 获取class属性值
			设置:
				elem.id = 'd1';
				elem.className = 'c1';
			移除:
				elem.id = null;
				
	5.操作元素样式
		1.基于id/class选择器,为元素添加样式
			通过操作元素id/class属性,对应选择器样式
			
			setAttribute();
			elem.id = '';
			elem.className = '';
			
		2.通过style标签属性,操作元素样式
			语法:
				elem.style.CSS属性名 = '';
			注意:
				css属性名中出现的连接符(-)是不允许使用的,一律改成驼峰标识
				e.g.
					h1.style.backgroundColor
					h1.style.fontSize
					
		练习:
			1.创建 div 按钮 输入框
			2.按钮点击时,验证用户输入的用户名是否在6-18位之间
			3.满足要求,在div中以绿色文本提示用户'用户名合法'
				不满足要求,以红色文本提示
				
	6.操作元素内容
		1.属性: innerHTML
			设置或读取标签内容,可以识别HTML标签
		
		2.属性: innerText
			设置或读取标签内容,不能识别标签
			
		3.属性: value
			获取表单控件的值
			
	7.节点分类与名称
		1.nodeType 属性
			查看节点类型,返回数值
			元素节点:	1
			属性节点:	2
			文本节点:	3
			-------------
			注释节点:	8
			文档节点:	9
			
		2.nodeName
			查看节点名称
			元素节点:	标签名
			属性节点:	属性名
			文本节点:	#text
			-----------------
			注释节点:	#comment
			文档节点:	#document
			
	8.节点的层次属性
		1.parentNode 属性
			获取当前元素节点的父节点
		
		2.childNodes 属性
			获取当前元素所有的子节点
			<h1 id = 'd1'> 标题</h1>
			标签属性与文本内容会以子节点的形式返回,对应属性节点和文本节点
		
		3.children 属性
			1.获取当前元素所有的子节点,不包含文本节点,只返回元素节点
			2.返回的子元素中只包含直接子元素,不包含间接子元素
		
		